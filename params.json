{"name":"mod_spotify","tagline":"A Spotify module for use with Corona SDK","body":"# mod_spotify\r\n\r\n___A package for authentication and access to the Spotify Web API for use with Corona SDK.___\r\n\r\nThe package containes two modules, one for the OAuth workflow, and the other is a __\"request\"__ module to call the __Spotify__ API. These modules reside in the __spotify__ folder and should be left in that directory.\r\n\r\n## Setting up a Spotify app for mod_spotify\r\n\r\nYou will need to set up an app at the [__Spotify developer portal__](https://developer.spotify.com) before you can start using the API in the mod. Most importantly, we need a __client_id__.\r\n\r\n> __mod_spotify__ is using the __Spotify Web API__. You cannot stream music directly with this API. You _can_ open a __Spotify__ app, and send it a deep link, if its installed\r\n\r\n 1. Log into your Spotify developer account (or register) at https://developer.spotify.com\r\n\r\n 1. Click the __My Apps__ navigation link\r\n\r\n 1. Click the __Create an app__ button\r\n\r\n 1. Fill in the app details and click __Create__\r\n\r\n 1. On the next page, scroll down and click __Add Uri__\r\n\r\n 1. Enter: `http://localhost/auth.html`\r\n\r\n 1. Click __Add Uri__ again to add it. (huh?)\r\n\r\n 1. Note the __Client ID__. You will use that in the mod.\r\n\r\n 1. Make sure to click __Save__ to update the changes.\r\n\r\n 1. _You're all done here!_\r\n\r\n## Working with mod_spotify\r\n\r\nAdd the __Spotify__ modules to your project:\r\n\r\n```lua\r\nlocal spotifyAuth = require('spotify.spotify_auth')\r\nlocal spotifyApi = require('spotify.spotify_api')\r\n```\r\n\r\n## spotify_auth module\r\n`spotify_auth.lua`\r\n\r\nThe __Spotify__ API uses __OAuth2__ for authentication, which means that the user must manually \"whitelist\" your application. This usually requires a visit to a web page for the user to log into the service and accept any special options your app requires (see 'scope' below).\r\n\r\nThe entire process is handled by the __spotify_auth__ module. Leaving you (hopefully) with a user confirmed access token, which is then sent with each API request behind the scenes.\r\n\r\nTo start the OAuth workflow, which should happen towards the start of your app:\r\n\r\nSet up a callback for the authorization\r\n```lua\r\n--hold the api instance\r\nlocal spotify\r\n-- Set up the callback\r\nlocal function callback( table_result )\r\n  if table_result.error then --error\r\n    print('error', table_result.error)\r\n  elseif table_result.token then --success\r\n    --store the access token\r\n    self.access_token = table_result.token\r\n    --initialize the spotify_api\r\n    --module with the access token.\r\n    spotify = spotifyApi:init( self.access_token )\r\n  end\r\nend\r\n```\r\n\r\n### Visualizing the output\r\n\r\nYou can pass `true` along with the `access_token` to enable auto table printing in the terminal, as the requests resolve.\r\n\r\n```lua\r\n-- Turn on auto output logging\r\nspotify = spotifyApi:init( self.access_token, true )\r\n```\r\nYou can also use the built-in command `dump` to manually output a table.\r\n\r\n```lua\r\nspotify.dump( api_tbl_data ) --prints to the terminal\r\n```\r\n\r\n### Running the OAuth prompt\r\n\r\nPrompt the user for the confirmation using\r\nan options table with some specific keys.\r\n```lua\r\nlocal options =\r\n{\r\n  client_id = 'YOUR_SPOTIFY_APP_CLIENT_ID',\r\n  scope = 'user-library-read user-read-email'\r\n  callback = callback\r\n}\r\n\r\nspotifyAuth:prompt( options )\r\n```\r\n\r\n> __Make sure to read up on the [scoping options here](https://developer.spotify.com/web-api/using-scopes/). Scroll down a bit to the Scope list on the page.__\r\n\r\n### Spotify Auth methods\r\n\r\n#### spotifyAuth:prompt( options )\r\n\r\n> Prompt for confirmation. Returns access token, or error.\r\n\r\n_Options table keys_\r\n\r\n* client_id (required)\r\n* scope\r\n* show_dialog\r\n* callback (required)\r\n\r\n---\r\n\r\n## spotify_api module\r\n`spotify_api.lua`\r\n\r\n\r\nThe __spotify_api__ module provides a method of calling the Web REST API. You can view the [__Spotify__ API docs](https://developer.spotify.com/web-api/endpoint-reference/) as a reference on putting together requests.\r\n\r\nSearch for an item [(doc source)](https://developer.spotify.com/web-api/search-item/)\r\n\r\n```lua\r\nlocal api_request =\r\n{\r\n  method = spotify.Get -- default, optional.\r\n  path = 'search',\r\n  params =\r\n  {\r\n    q = \"A Tribe Called Quest\",\r\n    limit = 4,\r\n    type = \"track\"\r\n  },\r\n  onResult = function( result_tbl )\r\n    local media = result_tbl.items[1].images[1].url\r\n  end\r\n}\r\nspotifyApi:request( api_request )\r\n```\r\n\r\nIn the `api_request` above, the `method` key defaults to 'GET', so you can exclude it for any 'GET' requests (which is most). The `params` key will depend on each API function, and is a table of key/value pairs. See the [__Spotify Web API__ docs](https://developer.spotify.com/web-api/endpoint-reference/).\r\n\r\n### Figuring out the `path` parameter\r\n\r\nOn the __Spotify__ [endpoint reference](https://developer.spotify.com/web-api/endpoint-reference/) page is a table of API actions. You can find the `method` from the __Method__ column. In the __Endpoint__ column is where you derive the `path` property for your request. As an example, the endpoints will look like so:\r\n\r\n`/v1/browse/categories`\r\n\r\n__For your request path you only need everything after the \"v1/\"__. So for the endpoint above, you would use as the `path` parameter:\r\n\r\n`browse/categories`\r\n\r\n### Building the `params` parameter\r\n\r\nIf you click on one of the doc links for an endpoint, you will be taken to a detail page that will commonly list additional query string modifiers you can add.\r\n\r\nFor example, the `browse/categories` options include `country`, `locale`, `limit`, etc. The query parameters vary for each endpoint.\r\n\r\n> Though output in JSON, you can also view the expected response structure on the API detail pages.\r\n\r\nTo add parameters to the query string, just build up an associative table.\r\n\r\n```lua\r\nlocal query_params =\r\n{\r\n  limit = 10,\r\n  country = US\r\n}\r\n```\r\nIf the key names are exotic in any way -- contain spaces or the like -- then put the key name in quotes, and some brackets.\r\n\r\n```lua\r\nlocal query_params =\r\n{\r\n  limit = 10,\r\n  country = \"US\",\r\n  [\"exotic key!\"] = spotify.encode(\"a value with spaces\")\r\n}\r\n```\r\n\r\n### Including data with 'POST' and 'PUT'\r\n\r\n```lua\r\nlocal req =\r\n{\r\n  path = 'browse/new-releases',\r\n  body = '{\"genre\":\"rock\"}',\r\n  method = spotify.Post\r\n}\r\n```\r\n\r\nAny 'POST' or 'PUSH' actions take JSON data in the body. You can build these structures as tables first and then convert them.\r\n\r\n```lua\r\nlocal bt = { genre = \"rock\" }\r\nlocal body = spotify.tbl2json( bt )\r\n```\r\nSome actions use both the `body` and `params`\r\n\r\n```lua\r\nlocal req =\r\n{\r\n  method = spotify.Put\r\n  params = { username = \"Martha\" },\r\n  body = spotify.tbl2json({ dogs = { 'Fred', 'Alice' }, reads = true })\r\n}\r\n```\r\n\r\n> You must specify the http `method` in every case, except 'GET'.\r\n\r\n### Setting up the `onResult` parameter\r\n\r\nYou need to set up a callback in `onResult` to retrieve any results.\r\n\r\n```lua\r\nlocal req =\r\n{\r\n  path = 'browse/new-releases',\r\n  params = { limit = 1, country = 'US' },\r\n  onResult = function( result_tbl )\r\n    --output table to terminal\r\n    spotify.dump( result_tbl )\r\n  end\r\n}\r\n```\r\n\r\n### Send the Spotify Web API request\r\n\r\nThe results will be returned to the `onResult` handler.\r\n\r\n> __Results are always returned as Lua tables.__\r\n\r\n```lua\r\nspotify:request( req )\r\n```\r\n\r\n### Spotify API methods\r\n\r\n#### spotify:request( req_tbl )\r\n\r\n> Sends a request to Spotify\r\n\r\n_Request table keys_\r\n\r\n* path (required)\r\n* method (required)\r\n* params\r\n* body\r\n* onResult (required)\r\n\r\n#### spotify.encode( url_str )\r\n\r\n> URL encode a string (escape)\r\n\r\n#### spotify.decode( enc_url )\r\n\r\n> Decode a URL (unescape)\r\n\r\n#### spotify.tbl2json( tbl )\r\n\r\n> Converts a Lua table to JSON string\r\n\r\n#### spotify.json2tbl( json_str )\r\n\r\n> Converts JSON string to Lua table\r\n\r\n#### spotify.dump( tbl )\r\n\r\n> Outputs a table in the terminal\r\n\r\n### Http method constants\r\n\r\n#### spotify.Get\r\n\r\n> GET\r\n\r\n#### spotify.Post\r\n\r\n> POST\r\n\r\n#### spotify.Put\r\n\r\n> PUT\r\n\r\n#### spotify.Delete\r\n\r\n> DELETE\r\n\r\nYou can use the `method` string in place of the constants in the request table.\r\n\r\n:elephant: &copy;2015 C. Byerley - [@develephant](https://twitter.com/develephant)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}